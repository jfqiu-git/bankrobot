#ifndef DEPTH_IMAGE_TO_LASERSCAN_SCAN_H_
#define DEPTH_IMAGE_TO_LASERSCAN_SCAN_H_s

#include <sensor_msgs/LaserScan.h>

class depthimage_to_laserscan 
{
public:
	/**** init ****/
	depthimage_to_laserscan () 
	{
		scan_msg->header.frame_id = "kinectv2";
		scan_msg->time_increment = 0.0;
		scan_msg->scan_time = 1.0/30; // 30hz
		scan_msg->range_min = 0.5;    
		scan_msg->range_max = 4.5;

		scan_height = 1;
	}
	
	/**** func ****/
	bool use_point(const float new_value, const float old_value, const float range_min, const float range_max);

	/**** tool ****/
	static inline bool valid(uint16_t depth) { return depth != 0; }
	static inline float toMeters(uint16_t depth) { return depth * 0.001f; } // originally mm
	static inline uint16_t fromMeters(float depth) { return (depth * 1000.0f) + 0.5f; }
	static inline void initializeBuffer(std::vector<uint8_t>& buffer) {} // Do nothing - already zero-filled

	static inline void initializeBuffer(std::vector<uint8_t>& buffer)
	{
		float* start = reinterpret_cast<float*>(&buffer[0]);
		float* end = reinterpret_cast<float*>(&buffer[0] + buffer.size());
		std::fill(start, end, std::numeric_limits<float>::quiet_NaN());
	}

	/**** vars ****/
	sensor_msgs::LaserScanPtr scan_msg;
	int scan_height;
};

#endif
